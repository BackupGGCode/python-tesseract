Index: main_dummy.cpp
===================================================================
--- main_dummy.cpp	(revision 100)
+++ main_dummy.cpp	(working copy)
@@ -16,6 +16,7 @@
 #endif
 #include "allheaders.h"
 #include "baseapi.h"
+#include "img.h"
 #include "strngs.h"
 #include "tprintf.h"
 #include "tesseractmain.h"
@@ -23,6 +24,8 @@
 	#include "fmemopen.h"
 #endif
 
+#include "main_dummy.h"
+
 bool isLibLept() {
 
 	#if defined(HAVE_LIBLEPT)
@@ -138,7 +141,7 @@
 	fseek(fp, 0, SEEK_END);
 	int fileLen=ftell(fp);
 	fseek(fp, 0, SEEK_SET);
-	printf("fileLen=%d\n",fileLen);
+	//printf("fileLen=%d\n",fileLen);
 	char *buffer;
 	//Allocate memory
 	buffer=(char *)malloc(fileLen+1);
@@ -151,7 +154,7 @@
 	int n;
 	n = fread(buffer,fileLen, 1, fp);
 	fclose(fp);
-	printf("n=%d\n",n);
+	//printf("n=%d\n",n);
 	//dump_buffer(buffer,fileLen);
 	char* retStr;
 	retStr=ProcessPagesBuffer(buffer,fileLen, api);
@@ -160,6 +163,91 @@
 	return retStr;
  }
  
+ /* from PyBLOB project 
+  http://code.google.com/p/pyblobs/issues/attachmentText?id=2&aid=4459562154860045232&name=iplimage_t.h&token=ed989cead6fe486664a024d538bccc2b
+  */
+struct iplimage_t {
+    PyObject_HEAD
+    IplImage *a;
+    PyObject *data;
+    size_t offset;
+}; 
+  
+static PyTypeObject iplimage_Type = {
+  PyObject_HEAD_INIT(&PyType_Type)
+  0,                                      /*size*/
+  "cv.iplimage",                          /*name*/
+  sizeof(iplimage_t),                        /*basicsize*/
+};
 
+static int is_none(PyObject *o)
+{
+  //printf("is_none: %d\n", Py_None == o);
+  return Py_None == o;
+}
 
-                
+static int is_iplimage(PyObject *o)
+{
+  PyObject* to = PyObject_Type(o);
+  const char* tp_name = ((PyTypeObject*) to)->tp_name;
+  //printf("is_iplimage: %s, %d\n", tp_name, strcmp(tp_name, "cv.iplimage") == 0);
+  return strcmp(tp_name, "cv.iplimage") == 0;
+}
+
+/* convert_to_IplImage(): convert a PyObject* to IplImage*/
+/* Note: this has been copied verbatim from <opencv_root>/interfaces/python/cv.cpp */
+static int convert_to_IplImage(PyObject *o, IplImage **dst)
+{
+    iplimage_t *ipl = (iplimage_t*)o;
+    void *buffer;
+    Py_ssize_t buffer_len;
+
+    if (!is_iplimage(o)) {
+	return -1; //failmsg("Argument must be IplImage");
+    } else if (PyString_Check(ipl->data)) {
+	cvSetData(ipl->a, PyString_AsString(ipl->data) + ipl->offset, ipl->a->widthStep);
+	assert(cvGetErrStatus() == 0);
+	*dst = ipl->a;
+	return 1;
+    } else if (ipl->data && PyObject_AsWriteBuffer(ipl->data, &buffer, &buffer_len) == 0) {
+	cvSetData(ipl->a, (void*)((char*)buffer + ipl->offset), ipl->a->widthStep);
+	assert(cvGetErrStatus() == 0);
+	*dst = ipl->a;
+	return 1; 
+    } else {
+	return -1;// failmsg("IplImage argument has no data");
+    }
+}
+
+void SetCvImage(PyObject* o, tesseract::TessBaseAPI* api)
+{
+    IplImage* img, *grayImg, *blackWhiteImg;
+    int res =  convert_to_IplImage(o, &img);
+
+    //if succesfull
+    if ( res == 1 )
+    {   
+      api->SetImage( (unsigned char*) img->imageData,  img->width, img->height, img->nChannels, img->widthStep);
+    }
+
+}
+
+char* GetUTF8Text(tesseract::TessBaseAPI* api)
+{
+  bool failed = api->Recognize(NULL) < 0;
+  if ( failed) return 0;
+  
+  STRING mstr = api->GetUTF8Text();
+  const char *tmpStr=mstr.string();
+  char *retStr = new char[strlen(tmpStr) + 1];
+  strcpy (retStr,tmpStr);
+  //printf("ok->%s",retStr);
+  return retStr;  
+}
+
+bool SetVariable(const char* var, const char* value, tesseract::TessBaseAPI* api)
+{
+  bool res = api->SetVariable(var, value);
+  printf ("set variable %s result %d\n", var, res); 
+  return res;
+}
\ No newline at end of file
Index: main_dummy.h
===================================================================
--- main_dummy.h	(revision 100)
+++ main_dummy.h	(working copy)
@@ -1,3 +1,6 @@
+#include <opencv/cv.h>
+#include <Python.h>
+
 bool isLibTiff(); 
 bool isLibLept(); 
 char* ProcessPagesWrapper(const char* image,tesseract::TessBaseAPI* api);
@@ -5,3 +8,7 @@
 char* ProcessPagesFileStream(const char* image,tesseract::TessBaseAPI* api);
 char* ProcessPagesBuffer(char* buffer, int fileLen, tesseract::TessBaseAPI* api);
 char* ProcessPagesRaw(const char* image,tesseract::TessBaseAPI* api);
+
+void SetCvImage(PyObject* o, tesseract::TessBaseAPI* api);
+bool SetVariable(const char* var, const char* value, tesseract::TessBaseAPI* api);
+char* GetUTF8Text(tesseract::TessBaseAPI* api);
\ No newline at end of file
Index: setup.py
===================================================================
--- setup.py	(revision 100)
+++ setup.py	(working copy)
@@ -59,15 +59,16 @@
 	
 tesseract_module = Extension('_tesseract',
 									sources=sources,
+									#extra_compile_args=["-DEBUG -O1 -pg "],
 									swig_opts=["-c++", "-I"+inclpath('tesseract'),
 													"-I"+incl,
 													"-I"+inclpath('leptonica')],
-									extra_objects=extra_objects,
+									extra_objects=extra_objects,									
 									include_dirs=['.',inclpath('tesseract'),
 													incl,
 													inclpath('leptonica')],
 									#libraries=['stdc++','tesseract_api','lept'],
-									libraries=['tesseract_api'],
+									libraries=['tesseract','cv'],
 									extra_link_args=extra_link_args
 									)
 									
